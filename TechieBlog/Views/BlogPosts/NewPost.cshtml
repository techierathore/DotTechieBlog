@using BlogEngine.Models
@using BlogEngine.Services
@model Post
@{
    ViewBag.Title = Model.UIPageTitle;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<div class="small-header transition animated fadeIn">
    <div class="hpanel">
        <div class="panel-body">
            <div id="hbreadcrumb" class="pull-right">
                <ol class="hbreadcrumb breadcrumb">
                    <li><a href="@Url.Action("AdminHome", "AdminDashboard")">Dashboard</a></li>
                    <li>
                        <a href="@Url.Action("ShowAllPosts", "BlogPosts")">Posts</a>
                    </li>
                    <li class="active">
                        <span>@Model.UIPageTitle</span>
                    </li>
                </ol>
            </div>
            <h2 class="font-light m-b-xs">
                @Model.UIPageTitle
            </h2>
        </div>
    </div>
</div>

<div class="content">
    <div class="hpanel">
        <div class="panel-body">
            @using (Html.BeginForm("NewPost", "BlogPosts", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.PostID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.Published, new { htmlAttributes = new { @class = "form-control" } })
                @Html.HiddenFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="col-md-2 control-label">Upload Featured Image </label>
                    <div class="col-md-5">
                        <input type="file" class="form-control" id="UploadBlogImg" />
                    </div>
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.FeaturedImage, new { htmlAttributes = new { @class = "form-control", placeholder = "Blog Featured Image Url" } })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label">&nbsp;</label>
                    <div class="col-md-10">
                        <label class="control-label">Squeezed Image Preview</label>
                        <img id="imgPreview" height="50" width="750" class="thumbnail" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label" for="Title">Title </label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Blog Title" } })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label" for="Abstract">Abstract </label>
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Abstract, new { @class = "form-control", @row = 3, placeholder = "Enter Blog Content" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label">Content</label>
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.PostContent, new { @class = "form-control", @row = 5, })
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label">Tags</label>
                    <div class="col-md-10">
                        @{
                            var objDataSvc = new BlogSvc();
                            var vTags = objDataSvc.GetAllTags();
                            foreach (Tag oTag in vTags)
                            {
                                if (Model.Tags != null)
                                {
                                    if (Model.Tags.Contains(oTag.TagName))
                                    {
                                        <label class="checkbox-inline">
                                            <input type="checkbox" id="@oTag.TagName" checked="checked" value="@oTag.TagName" onclick="ChkBoxChecked(this)"> @oTag.TagName
                                        </label>
                                    }
                                    else
                                    {
                                        <label class="checkbox-inline">
                                            <input type="checkbox" id="@oTag.TagName" value="@oTag.TagName" onclick="ChkBoxChecked(this)"> @oTag.TagName
                                        </label>
                                    }
                                }
                                else
                                {
                                    <label class="checkbox-inline">
                                        <input type="checkbox" id="@oTag.TagName" value="@oTag.TagName" onclick="ChkBoxChecked(this)"> @oTag.TagName
                                    </label>
                                }
                            }
                        }
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button class="btn btn-info" onclick="SaveDraft()"><i class="fa fa-save"></i> Save Draft</button>
                        <button class="btn btn-success" onclick="PubishBlog()"><i class="fa fa-pencil-square"></i> Publish</button>
                        <button class="btn btn-danger">Trash</button>
                    </div>
                </div>
            </div>

                }
            </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/bundles/summernote/css")
}

@section Scripts {
    @Scripts.Render("~/bundles/summernote/js")

<script type="text/javascript">

    $('#PostContent').summernote({
        height: 300,                 // set editor height
        minHeight: null,             // set minimum height of editor
        maxHeight: null,             // set maximum height of editor
        focus: true,                  // set focus to editable area after initializing summernote
        callbacks: {
            onImageUpload: function (files) {
                for (let i = 0; i < files.length; i++) {
                    UploadImage(files[i]);
                }
            }
        }
    });

    function UploadImage(file) {
        var url = '@Url.Action("UploadFile", "Images")';

        formData = new FormData();
        formData.append("aUploadedFile", file);
        $.ajax({
            type: 'POST',
            url: url,
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (FileUrl) {
               // alert(FileUrl);
                var imgNode = document.createElement('img');
                imgNode.src = FileUrl;
                $('#PostContent').summernote('insertNode', imgNode);
            },
            error: function (data) {
                alert(data.responseText);
            }
        });
    }

    $("#UploadBlogImg").change(function () {
        UploadBlogImage();
    });
   function UploadBlogImage() {
        var url = '@Url.Action("UploadFile", "Images")';
        formData = new FormData();
        var files = $("#UploadBlogImg").get(0).files;
        if (files.length > 0) {
            formData.append("aUploadedFile", files[0]);
                    }
        $.ajax({
            type: 'POST',
            url: url,
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            success: function (FileUrl) {
                $("#FeaturedImage").val(FileUrl);
                $("#imgPreview").attr('src', FileUrl);
            },
            error: function (data) {
                alert(data.responseText);
            }
        });
    }
   function PubishBlog() {
         $("#Published").val("true");
    }
   function SaveDraft() {
         $("#Published").val("false");
    }
    function ChkBoxChecked(aChkBox) {
        var vTags = $('input#Tags').val();
        if (aChkBox.checked == true) {
            vTags = vTags + "," + aChkBox.id;
            $("#Tags").val(vTags);
        }
        else {
            if (vTags.includes(aChkBox.id)) {
                vTags = vTags.replace(aChkBox.id, '');
                $("#Tags").val(vTags);
            }
        }
    }
</script>
}